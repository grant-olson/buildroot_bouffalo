From 66797a01ac0f3786b9e87243ef5f62e3e164e27e Mon Sep 17 00:00:00 2001
From: "Grant T. Olson" <kgo@grant-olson.net>
Date: Thu, 9 Feb 2023 09:11:19 -0500
Subject: [PATCH 100/101] USB PHY power up code

---
 apps/m0_lowload/sdkconfig.default        |   4 +-
 apps/m0_lowload/src/main.c               |   8 +-
 components/CMakeLists.txt                |   3 +-
 components/usbphy/CMakeLists.txt         |   3 +
 components/usbphy/Kconfig                |  10 +++
 components/usbphy/README.md              |   3 +
 components/usbphy/include/oblfr_usbphy.h | 108 +++++++++++++++++++++++
 components/usbphy/src/oblfr_usbphy.c     |  94 ++++++++++++++++++++
 8 files changed, 230 insertions(+), 3 deletions(-)
 create mode 100644 components/usbphy/CMakeLists.txt
 create mode 100644 components/usbphy/Kconfig
 create mode 100644 components/usbphy/README.md
 create mode 100644 components/usbphy/include/oblfr_usbphy.h
 create mode 100644 components/usbphy/src/oblfr_usbphy.c

diff --git a/apps/m0_lowload/sdkconfig.default b/apps/m0_lowload/sdkconfig.default
index e02d4b4..e7b8f6a 100644
--- a/apps/m0_lowload/sdkconfig.default
+++ b/apps/m0_lowload/sdkconfig.default
@@ -1,3 +1,5 @@
 CONFIG_COMPONENT_MAILBOX=y
 CONFIG_COMPONENT_MAILBOX_IRQFWD_SDH=y
-CONFIG_COMPONENT_MAILBOX_IRQFWD_GPIO=y
\ No newline at end of file
+CONFIG_COMPONENT_MAILBOX_IRQFWD_GPIO=y
+CONFIG_COMPONENT_MAILBOX_IRQFWD_USB=y
+CONFIG_COMPONENT_USBPHY=y
diff --git a/apps/m0_lowload/src/main.c b/apps/m0_lowload/src/main.c
index deb161f..2264fc4 100755
--- a/apps/m0_lowload/src/main.c
+++ b/apps/m0_lowload/src/main.c
@@ -25,16 +25,22 @@
 #include <board.h>
 #include <bflb_mtimer.h>
 #include "oblfr_mailbox.h"
+#include "oblfr_usbphy.h"
 #include "sdkconfig.h"
 
 #define DBG_TAG "MAIN"
 #include <log.h>
 
-
 int main(void)
 {
     board_init();
 
+#ifdef CONFIG_COMPONENT_USBPHY
+   
+    bflb_usb_phy_init();
+
+#endif
+    
     LOG_I("Starting Mailbox Handlers\r\n");
 
     if (oblfr_mailbox_init() != OBLFR_OK) {
diff --git a/components/CMakeLists.txt b/components/CMakeLists.txt
index 39dd8ae..ee20396 100644
--- a/components/CMakeLists.txt
+++ b/components/CMakeLists.txt
@@ -6,4 +6,5 @@ sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_BUTTON button)
 sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_STATUS_LED indicator)
 sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_TIMER timer)
 sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_NVKVS nvkvs)
-sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_MAILBOX mailbox)
\ No newline at end of file
+sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_MAILBOX mailbox)
+sdk_add_subdirectory_ifdef(CONFIG_COMPONENT_USBPHY usbphy)
diff --git a/components/usbphy/CMakeLists.txt b/components/usbphy/CMakeLists.txt
new file mode 100644
index 0000000..b932d26
--- /dev/null
+++ b/components/usbphy/CMakeLists.txt
@@ -0,0 +1,3 @@
+sdk_generate_library(oblfr_usbphy)
+sdk_add_include_directories(include)
+sdk_library_add_sources(${CMAKE_CURRENT_SOURCE_DIR}/src/oblfr_usbphy.c)
diff --git a/components/usbphy/Kconfig b/components/usbphy/Kconfig
new file mode 100644
index 0000000..203800c
--- /dev/null
+++ b/components/usbphy/Kconfig
@@ -0,0 +1,10 @@
+config COMPONENT_USBPHY
+    bool "USBPHY Support for Linux"
+    default y
+    help
+        This initialize the power supply for the USB chip. Enable this
+	component if you are running linux on the D0 core and want to have
+	working USB
+
+        Please see the README.md file in the usbphy component directory
+        for more information
diff --git a/components/usbphy/README.md b/components/usbphy/README.md
new file mode 100644
index 0000000..1fcae76
--- /dev/null
+++ b/components/usbphy/README.md
@@ -0,0 +1,3 @@
+#usbphy
+
+Do the physical power up of the FOTG210 USB device so that linux can use it.
\ No newline at end of file
diff --git a/components/usbphy/include/oblfr_usbphy.h b/components/usbphy/include/oblfr_usbphy.h
new file mode 100644
index 0000000..6b1c2c1
--- /dev/null
+++ b/components/usbphy/include/oblfr_usbphy.h
@@ -0,0 +1,108 @@
+// Copyright () 2023 OpenBuffalo
+/**
+  ******************************************************************************
+  * @file    usb_v2_reg.h
+  * @version V1.0
+  * @date    2022-08-15
+  * @brief   This file is the description of.IP register
+  ******************************************************************************
+  * @attention
+  *
+  * <h2><center>&copy; COPYRIGHT(c) 2020 Bouffalo Lab</center></h2>
+  *
+  * Redistribution and use in source and binary forms, with or without modification,
+  * are permitted provided that the following conditions are met:
+  *   1. Redistributions of source code must retain the above copyright notice,
+  *      this list of conditions and the following disclaimer.
+  *   2. Redistributions in binary form must reproduce the above copyright notice,
+  *      this list of conditions and the following disclaimer in the documentation
+  *      and/or other materials provided with the distribution.
+  *   3. Neither the name of Bouffalo Lab nor the names of its contributors
+  *      may be used to endorse or promote products derived from this software
+  *      without specific prior written permission.
+  *
+  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
+  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
+  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+  *
+  ******************************************************************************
+  */
+
+#ifndef __OBLFR_USBPHY_H__
+
+#include <stdint.h>
+
+#define getreg32(a)               (*(volatile uint32_t *)(uintptr_t)(a))
+#define putreg32(v, a)            (*(volatile uint32_t *)(uintptr_t)(a) = (v))
+
+
+// SUBSYSTEMS
+#define BLFB_USB_BASE ((uint32_t)0x20072000)
+#define BFLB_PDS_BASE ((uint32_t)0x2000e000)
+
+// REGISTERS
+
+#define USB_OTG_CSR_OFFSET          (0x80)  /* OTG_CSR */
+#define USB_GLB_INT_OFFSET          (0xC4)  /* GLB_INT */
+
+#define PDS_USB_CTL_OFFSET      (0x500) /* usb_ctl */
+#define PDS_USB_PHY_CTRL_OFFSET (0x504) /* usb_phy_ctrl */
+
+// REGISTER VALUES
+
+/* 0x500 : usb_ctl */
+#define PDS_REG_USB_SW_RST_N   (1 << 0U)
+#define PDS_REG_USB_EXT_SUSP_N (1 << 1U)
+#define PDS_REG_USB_WAKEUP     (1 << 2U)
+#define PDS_REG_USB_L1_WAKEUP  (1 << 3U)
+#define PDS_REG_USB_DRVBUS_POL (1 << 4U)
+#define PDS_REG_USB_IDDIG      (1 << 5U)
+
+/* 0x504 : usb_phy_ctrl */
+#define PDS_REG_USB_PHY_PONRST       (1 << 0U)
+#define PDS_REG_USB_PHY_OSCOUTEN     (1 << 1U)
+#define PDS_REG_USB_PHY_XTLSEL_SHIFT (2U)
+#define PDS_REG_USB_PHY_XTLSEL_MASK  (0x3 << PDS_REG_USB_PHY_XTLSEL_SHIFT)
+#define PDS_REG_USB_PHY_XTLSEL_MASK  (0x3 << PDS_REG_USB_PHY_XTLSEL_SHIFT)
+#define PDS_REG_USB_PHY_OUTCLKSEL    (1 << 4U)
+#define PDS_REG_USB_PHY_PLLALIV      (1 << 5U)
+#define PDS_REG_PU_USB20_PSW         (1 << 6U)
+
+/* 0x80 : OTG_CSR */
+#define USB_B_BUS_REQ             (1 << 0U)
+#define USB_B_HNP_EN              (1 << 1U)
+#define USB_B_DSCHRG_VBUS         (1 << 2U)
+#define USB_A_BUS_REQ_HOV         (1 << 4U)
+#define USB_A_BUS_DROP_HOV        (1 << 5U)
+#define USB_A_SET_B_HNP_EN        (1 << 6U)
+#define USB_A_SRP_DET_EN          (1 << 7U)
+#define USB_A_SRP_RESP_TYP        (1 << 8U)
+#define USB_ID_FLT_SEL            (1 << 9U)
+#define USB_VBUS_FLT_SEL_HOV_POV  (1 << 10U)
+#define USB_HDISCON_FLT_SEL_HOV   (1 << 11U)
+#define USB_IDPULUP_HOV_POV       (1 << 13U)
+#define USB_B_SESS_END_POV        (1 << 16U)
+#define USB_B_SESS_VLD_POV        (1 << 17U)
+#define USB_A_SESS_VLD            (1 << 18U)
+#define USB_VBUS_VLD_HOV          (1 << 19U)
+#define USB_CROLE_HOV_POV         (1 << 20U)
+#define USB_ID_HOV_POV            (1 << 21U)
+#define USB_SPD_TYP_HOV_POV_SHIFT (22U)
+#define USB_SPD_TYP_HOV_POV_MASK  (0x3 << USB_SPD_TYP_HOV_POV_SHIFT)
+
+/* 0xC4 : GLB_INT */
+#define USB_MDEV_INT (1 << 0U)
+#define USB_MOTG_INT (1 << 1U)
+#define USB_MHC_INT  (1 << 2U)
+
+
+void bflb_usb_phy_init(void);
+
+#endif
diff --git a/components/usbphy/src/oblfr_usbphy.c b/components/usbphy/src/oblfr_usbphy.c
new file mode 100644
index 0000000..8097607
--- /dev/null
+++ b/components/usbphy/src/oblfr_usbphy.c
@@ -0,0 +1,94 @@
+//
+// This is the bare bones code to power up the USB subsystem so that
+// it can be used once the system is booted.
+//
+// All code was taken from the bl_mcu_sdk with adaptations, primarily
+// from the file:
+//
+// drivers/lhal/src/bflb_usb_v2.c
+// 
+
+// Copyright (c) 2023 OpenBuffalo
+
+/**
+ * @brief
+ *
+ * Copyright (c) 2021 Bouffalolab team
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.  The
+ * ASF licenses this file to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance with the
+ * License.  You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
+ * License for the specific language governing permissions and limitations
+ * under the License.
+ *
+ */
+
+#include "oblfr_usbphy.h"
+
+void bflb_usb_phy_init(void)
+{
+    uint32_t regval;
+
+    /* USB_PHY_CTRL[3:2] reg_usb_phy_xtlsel=0                             */
+    /* 2000e504 = 0x40; #100; USB_PHY_CTRL[6] reg_pu_usb20_psw=1 (VCC33A) */
+    /* 2000e504 = 0x41; #500; USB_PHY_CTRL[0] reg_usb_phy_ponrst=1        */
+    /* 2000e500 = 0x20; #100; USB_CTL[0] reg_usb_sw_rst_n=0               */
+    /* 2000e500 = 0x22; #500; USB_CTL[1] reg_usb_ext_susp_n=1             */
+    /* 2000e500 = 0x23; #100; USB_CTL[0] reg_usb_sw_rst_n=1               */
+    /* #1.2ms; wait UCLK                                                  */
+    /* wait(soc616_b0.usb_uclk);                                          */
+
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+    regval &= ~PDS_REG_USB_PHY_XTLSEL_MASK;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+    regval |= PDS_REG_PU_USB20_PSW;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+    regval |= PDS_REG_USB_PHY_PONRST;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_PHY_CTRL_OFFSET);
+
+    /* greater than 5T */
+    bflb_mtimer_delay_us(1);
+
+    
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+    regval &= ~PDS_REG_USB_SW_RST_N;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+
+    /* greater than 5T */
+    bflb_mtimer_delay_us(1);
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+    regval |= PDS_REG_USB_EXT_SUSP_N;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+
+    /* wait UCLK 1.2ms */
+    bflb_mtimer_delay_ms(3);
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+    regval |= PDS_REG_USB_SW_RST_N;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+
+    bflb_mtimer_delay_ms(2);
+
+    regval = getreg32(BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+    regval &= ~PDS_REG_USB_DRVBUS_POL;
+    regval &= ~PDS_REG_USB_IDDIG;
+    putreg32(regval, BFLB_PDS_BASE + PDS_USB_CTL_OFFSET);
+
+}
+
-- 
2.34.1

